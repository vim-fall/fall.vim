*fall.txt*: Filter All - Flexible Fuzzy Finder for Vim/Neovim

Author: Alisue <lambdalisue@gmail.com>
License: MIT License (See LICENSE)

=============================================================================
CONTENTS					*fall-contents*

INTRODUCTION				|fall-introduction|
REQUIREMENTS				|fall-requirements|
USAGE					|fall-usage|
CONFIGURATION				|fall-configuration|
CUSTOMIZATION				|fall-customization|
INTERFACE				|fall-interface|
MODULE					|fall-module|

=============================================================================
INTRODUCTION					*fall-introduction*

Fall (*fall.vim*) is a powerful, flexible fuzzy finder framework for Vim and
Neovim. The name stands for "Filter All" and it provides an extensible
architecture that allows users to search, filter, and act on various data
sources through a unified interface.

Key features include:

	- Extensible architecture with modular components
	- Quick help via <F1> key
	- Support for multiple matchers, sorters, renderers, and previewers
	- Submatch capabilities for refined filtering
	- Action selector for invoking various actions
	- Session management for resuming previous searches
	- Asynchronous processing with performance optimization
	- Rich customization through TypeScript and Vim script

=============================================================================
REQUIREMENTS					*fall-requirements*

Fall relies on denops.vim for its operation.

denops.vim~
	An ecosystem enabling Vim/Neovim plugin development in Deno.
	https://github.com/vim-denops/denops.vim

The default "nerdfont" renderer necessitates a Nerd Font-configured terminal
for proper icon display.

Nerd Font~
	A collection of over 10,000 icons compatible with popular
	programming fonts.
	https://www.nerdfonts.com/

To disable the "nerdfont" renderer, remove it from the "renderers" array
within the "custom.ts" file. Refer to |fall-customization| for details on
customization.

=============================================================================
USAGE						*fall-usage*

The |:Fall| command initiates a floating window for filtering specified
sources. For instance, to filter files in the current directory using the
"file" source:
>
	:Fall file
<
To filter files in a specific directory, provide the directory path as an
argument:
>
	:Fall file /path/to/directory
<
To filter lines within the current buffer, use the "line" source:
>
	:Fall line
<
Sources are defined in "custom.ts" via |:FallCustom|. In default "custom.ts",
the following sources are defined:

Name		Description~
"grep"		Filter files by content using grep command
"git-grep"	Filter files by content using git-grep (git repositories only)
"rg"		Filter files by content using ripgrep (faster alternative)
"file"		Filter files in the directory (respects gitignore)
"file:all"	Filter all files in the directory (includes hidden/ignored)
"line"		Filter lines in the current buffer or specified file
"buffer"	Filter and switch between open buffers
"help"		Filter and browse Vim help tags
"quickfix"	Filter items in the |quickfix| list
"oldfiles"	Filter recently edited files from |:oldfiles|
"history"	Filter and execute from command history

Each source can accept additional arguments. For example:
>
	" Search in a specific directory
	:Fall file ~/projects
	
	" Search specific file types with ripgrep
	:Fall rg --type=python
	
	" Filter lines in a specific file
	:Fall line /path/to/file.txt
<

Users can define additional sources in "custom.ts" to suit their needs. See
|fall-customization| for customization details.

Within the picker window, the following default mappings are applied. These
can be confirmed via the <F1> help prompt.

Navigation~
Key		Description~
<C-t>		Move cursor to the first item
<C-g>		Move cursor to the last item
<C-p>		Move cursor to the previous item
<C-n>		Move cursor to the next item
<C-u>		Scroll up by 'scroll' lines
<C-d>		Scroll down by 'scroll' lines
<PageUp>	Scroll list content left
<PageDown>	Scroll list content right
<S-PageUp>	Scroll left by 'scroll' lines
<S-PageDown>	Scroll right by 'scroll' lines

Selection~
Key		Description~
<C-,>		Toggle selection of the current item
<C-.>		Select all visible items
<C-j>		Select current item and move to next
<C-k>		Move to previous item and select it

Preview Navigation~
Key		Description~
<M-Home>	Move to the first line of preview
<M-End>		Move to the last line of preview
<M-Up>		Move to the previous line of preview
<M-Down>	Move to the next line of preview
<M-Left>	Scroll preview left
<M-Right>	Scroll preview right
<S-Left>	Scroll preview left by 'scroll' lines
<S-Right>	Scroll preview right by 'scroll' lines

Actions and Modes~
Key		Description~
<CR>		Execute default action on selected item(s)
<Tab>		Open the action selector
<F1>		Toggle help window
<F2>		Cycle through available matchers
<F3>		Cycle through available sorters
<F4>		Cycle through available renderers
<F5>		Cycle through available previewers

Uses can define additional mappings via |FallPickerEnter| autocmd. See
|fall-configuration| for details.

Session Management~

Fall provides session management commands to save and resume picker states:

						*:FallSession*
:FallSession	Open the session manager to view and resume saved
		sessions. Sessions preserve the picker state including
		query, selections, and cursor position.

						*:FallResume*
:FallResume [{name}]
		Resume the last picker session or a specific named session.
		If {name} is provided, resume that specific session.

=============================================================================
CONFIGURATION					*fall-configuration*

In Fall, configurations that leverage Vim's built-in functionality are
categorized as "Configuration." This includes settings such as key mappings,
highlights, and buffer option modifications.

Visit https://github.com/vim-fall/fall.vim/wiki/Configuration if you prefer to
see documentation in a web browser.

-------------------------------------------------------------------------------
MAPPING				*fall-configuration-mapping*

Use <Plug> mappings with |cnoremap| in |FallPickerEnter| autocmd to configure
mappings. See |fall-mapping| for a list of available mappings.

For example:
>vim
	function! s:my_fall() abort
	  " Use <Up> and <Down> to navigate instead of <C-n> and <C-p>
	  cnoremap <nowait> <Up> <Plug>(fall-list-prev)
	  cnoremap <nowait> <Down> <Plug>(fall-list-next)
	  " Disable horizontal scroll
	  cnoremap <nowait> <Nop> <Plug>(fall-list-left)
	  cnoremap <nowait> <Nop> <Plug>(fall-list-right)
	  " Open in split window
	  cnoremap <nowait> <C-x> <Cmd>call fall#action('open:split') <CR>
	  cnoremap <nowait> <C-v> <Cmd>call fall#action('open:vsplit') <CR>
	endfunction

	augroup my_fall
	  autocmd!
	  autocmd User FallPickerEnter:* call s:my_fall()
	augroup END
<
To disable default mappings, use |g:fall#disable_default_mappings| like
>vim
	let g:fall#disable_default_mappings = v:true
<
-------------------------------------------------------------------------------
HIGHLIGHT			*fall-configuration-highlight*

Use FallXXXXX highlight groups to configure the picker window appearance. See
|fall-highlight| for a list of available highlight groups.

For example:
>vim
	function! s:my_fall_style() abort
	  highlight FallNormal
	        \ ctermfg=Blue
	        \ ctermbg=Black
	        \ guifg=#0000FF
	        \ guibg=#000000
	  highlight FallBorder ctermfg=Green guifg=#00FF00
	  highlight FallInputHeader cterm=bold ctermfg=Yellow guifg=#FFFF00
	endfunction
	augroup MyFallStyle
	  autocmd!
	  autocmd ColorScheme * call s:my_fall_style()
	augroup END
	call s:my_fall_style()
<
-------------------------------------------------------------------------------
SIGN				*fall-configuration-sign*

Use FallXXXXX sign groups to configure the picker window appearance. See
|fall-sign| for a list of available sign groups.

For example:
>vim
	function! s:my_fall_style() abort
	  sign define FallListSelected text=*
	endfunction

	augroup fall_plugin_style
	  autocmd!
	  autocmd ColorScheme * call s:my_fall_style()
	augroup END
	call s:my_fall_style()
<
-------------------------------------------------------------------------------
AUTOCMD				*fall-configuration-autocmd*

Use FallXXXXX autocmd events to configure the picker window behavior. See
|fall-autocmd| for a list of available autocmd events.

For example:
>vim
	function! s:my_fall_preview() abort
	  " Disable number/relativenumber on the preview component
	  setlocal nonumber norelativenumber
	endfunction
	
	augroup my_fall_preview
	  autocmd!
	  autocmd User FallPreviewRendered:* call s:my_fall_preview()
	augroup END
<
------------------------------------------------------------------------------
FILETYPE			*fall-configuration-filetype*

Use fall-xxxxx filetype to configure the picker window appearance and behavior.
See |fall-filetype| for a list of available filetypes.

For example:
>vim
	function! s:my_fall_config() abort
	  " Enable the 'list' option for Fall's components
	  setlocal list
	endfunction
	
	augroup my_fall_config
	  autocmd!
	  autocmd FileType fall-input call s:my_fall_config()
	  autocmd FileType fall-list call s:my_fall_config()
	  autocmd FileType fall-help call s:my_fall_config()
	augroup END
<
==============================================================================
CUSTOMIZATION				*fall-customization*

In Fall, settings written in TypeScript to enhance Fall's behavior are 
categorized as "Customization." This specifically refers to modifications made
to the user customization file, which can be accessed via the |FallCustom|
command.

Visit https://github.com/vim-fall/fall.vim/wiki/Customization if you prefer to
see documentation in a web browser.

See |fall-module| for explanations of the modules used in customization.

------------------------------------------------------------------------------
CUSTOMIZATION FILE		*fall-customization-file*

When you run the |FallCustom| command, the user customization file opens. In
this file, Pickers are defined, and only the Pickers defined here can be used
in Fall.

For example, if you create a user customization file without defining any
Pickers, as shown below, Fall will not have any Pickers available:
>typescript
	import type { Entrypoint } from "jsr:@vim-fall/custom";
	
	export const main: Entrypoint = () => {
	  // WARNING: Since no Pickers are defined, Fall provides no functionality
	};
<
------------------------------------------------------------------------------
DEFINING PICKERS		*fall-customization-defining-pickers*

A Picker can be defined by specifying at least its name, source, matcher, and
actions. Additionally, if no additional options are required, modules can be
passed as functions directly:
>typescript
	import type { Entrypoint } from "jsr:@vim-fall/custom";
	import * as builtin from "jsr:@vim-fall/std/builtin";
	
	export const main: Entrypoint = ({ definePickerFromSource }) => {
	  definePickerFromSource(
	    "file",
	    // `builtin.source.file` and `builtin.source.file()` are treated as
	    // equivalent
	    builtin.source.file,
	    {
	      matchers: [builtin.matcher.fzf],
	      actions: {
	        open: builtin.action.open,
	      },
	      defaultAction: "open",
	    },
	  );
	};
<
------------------------------------------------------------------------------
AVAILABLE ARGUMENTS		*fall-customization-arguments*

To define a Picker, you use the "definePickerFromSource" function as shown
above. The "main" function receives the following arguments:

Argument Name			Description ~
"denops"			A Denops instance.

"definePickerFromSource"	A function to define a Picker using a Source
				and a Matcher.

"definePickerFromCurator"	A function to define a Picker using a Curator.

"refineActionPicker"		A function to refine the Picker used for
				selecting actions.

"refineSetting"			A function to adjust various settings.

Users can utilize these functions to define Pickers and customize their
configurations.

See "builtin" modules of https://jsr.io/@vim-fall/std for available official
builtin extensions and https://jsr.io/@vim-fall/extra for available official
extra extensions. And see "denops/fall/_assets/default.custom.ts" for the
latest default customization file.

------------------------------------------------------------------------------
MODULE COMPOSITION                 *fall-customization-module-composition*

In addition, https://jsr.io/@vim-fall/std provides the following functions to
refine and compose individual modules:

Name			Description ~
"bindSourceArgs"	Wraps a source to prepend fixed arguments (static or
			dynamically resolved) to its input parameters before
			execution.

"bindCuratorArgs"	Wraps a curator to prepend fixed arguments (static or
			dynamically resolved) to its input parameters before
			execution.

"refineSource"		Applies multiple Refiners to Source to refine and
			process generated items.

"refineCurator"		Applies multiple Refiners to Curator to refine and
			process generated items.

"composeSources"	Combines multiple Sources to create a new Source that
			sequentially retrieves items from all Sources.

"composeMatchers"	Combines multiple Matchers to create a new Matcher
			that filters items through all Matchers.

"composeCurators"	Combines multiple Curators to create a new Curator
			that retrieves items through all Curators.

"composeSorters"	Combines multiple Sorters to create a new Sorter that
			sorts items through all Sorters.

"composeRenderers"	Combines multiple Renderers to create a new Renderer
			that processes items through all Renderers.

"composePreviewers"	Combines multiple Previewers to create a new Previewer
			that generates content from any of the Previewers.

"composeAction"		Combines multiple Actions to create a new Action that
			invokes all Actions.

By combining these modules, Fall enables flexible functionality.

For example, the following code demonstrates how to create a Source that
retrieves files recorded in Vim's |oldfiles| that exist in the current
directory:
>typescript
	import { refineSource } from "jsr:@vim-fall/std"
	import * as builtin from "jsr:@vim-fall/std/builtin"
	
	const source = refineSource(
	  builtin.source.oldfiles,
	  builtin.refiner.exists,
	  builtin.refiner.cwd,
	);
<

Similarly, the following example shows how to create an Action that change
directory and open:
>typescript
	import { composeActions } from "jsr:@vim-fall/std"
	import * as builtin from "jsr:@vim-fall/std/builtin"
	
	const action = composeActions(
	  builtin.action.cd,
	  builtin.action.open,
	);
<
=============================================================================
INTERFACE					*fall-interface*

-----------------------------------------------------------------------------
COMMAND						*fall-command*

						*:Fall*
:Fall {source} [{cmdarg}]
	Open picker to filter {source} (defined in "custom.ts" via
	|:FallCustom|). {cmdarg} is passed to the source.
>
	" Open picker to filter files in the current directory
	:Fall file

	" Open picker to filter files in the specified directory
	:Fall file /path/to/directory
<

						*:FallResume*
:FallResume [{filter}]
	Resume the previous picker. If {filter} is not specified, it resumes
	the latest picker. The {filter} can be a source name and/or a number
	indicating the order of the picker. If a source name is specified, it
	resumes the latest picker of that source. If a number is specified,
	it resumes the nth latest picker. If both a source name and a number
	are specified, it resumes the nth latest picker of that source. The
	number is preceded by a "#" character. If the number is not specified,
	it defaults to 1 (the latest picker).
>
	" Resume the latest picker
	:FallResume

	" Resume the latest picker of the "file" source
	:FallResume file

	" Resume the 2nd latest picker
	:FallResume #2

	" Resume the 2nd latest picker of the "file" source
	:FallResume file#2
<

						*:FallSession*
:FallSession
	Open a picker to browse and resume previous picker sessions. Fall
	automatically stores up to 100 picker sessions in memory, allowing
	you to return to previous searches with their complete state including
	query, filtered items, and selections.

	Sessions are listed in reverse chronological order (newest first) and
	display the session number, source name, and any arguments used.
	Selecting a session resumes it with its exact state.

	The following sources are excluded from session storage:
	- "@action" (action selection picker)
	- "@session" (the session picker itself)

	Sessions are stored in memory for quick access.
>
	" Open the session picker
	:FallSession
<
	See |:FallResume| for directly resuming sessions by number or source.

						*:FallCustom*
:FallCustom
	Open "custom.ts" for customization. This TypeScript file exports a
	"main" function defining pickers. Changes trigger reload via
	|:FallCustomReload|.

	See |g:fall_custom_path| for the file path.

						*:FallCustomReload*
:FallCustomReload
	Reload "custom.ts" to apply changes. Deno's module cache may require
	restart.

	See |:FallCustomRecache| for cache clearing.

						*:FallCustomRecache*
:FallCustomRecache
	Clear Deno's local module cache. Useful for dependency updates in
	"custom.ts".

-----------------------------------------------------------------------------
MAPPING						*fall-mapping*

<Plug>(fall-list-first)
	Moves the cursor to the first item in the list.

<Plug>(fall-list-last)
	Moves the cursor to the last item in the list.

<Plug>(fall-list-prev)
	Moves the cursor to the previous item in the list.

<Plug>(fall-list-next)
	Moves the cursor to the next item in the list.

<Plug>(fall-list-prev:scroll)
	Moves the cursor up by the value of &scroll in the list.

<Plug>(fall-list-next:scroll)
	Moves the cursor down by the value of &scroll in the list.

<Plug>(fall-list-left)
	Scrolls the list content to the left.

<Plug>(fall-list-right)
	Scrolls the list content to the right.

<Plug>(fall-list-left:scroll)
	Scrolls the list content to the left by the value of &scroll.

<Plug>(fall-list-right:scroll)
	Scrolls the list content to the right by the value of &scroll.

<Plug>(fall-select)
	Selects the currently highlighted item in the list.

<Plug>(fall-select-all)
	Selects all items in the list.

<Plug>(fall-switch-matcher-first)
	Switches to the first matcher.

<Plug>(fall-switch-matcher-last)
	Switches to the last matcher.

<Plug>(fall-switch-matcher-prev)
	Switches to the previous matcher.

<Plug>(fall-switch-matcher-next)
	Switches to the next matcher.

<Plug>(fall-switch-sorter-first)
	Switches to the first sorter.

<Plug>(fall-switch-sorter-last)
	Switches to the last sorter.

<Plug>(fall-switch-sorter-prev)
	Switches to the previous sorter.

<Plug>(fall-switch-sorter-next)
	Switches to the next sorter.

<Plug>(fall-switch-renderer-first)
	Switches to the first renderer.

<Plug>(fall-switch-renderer-last)
	Switches to the last renderer.

<Plug>(fall-switch-renderer-prev)
	Switches to the previous renderer.

<Plug>(fall-switch-renderer-next)
	Switches to the next renderer.

<Plug>(fall-switch-previewer-first)
	Switches to the first previewer.

<Plug>(fall-switch-previewer-last)
	Switches to the last previewer.

<Plug>(fall-switch-previewer-prev)
	Switches to the previous previewer.

<Plug>(fall-switch-previewer-next)
	Switches to the next previewer.

<Plug>(fall-preview-first)
	Moves the preview cursor to the first line.

<Plug>(fall-preview-last)
	Moves the preview cursor to the last line.

<Plug>(fall-preview-prev)
	Moves the preview cursor to the previous line.

<Plug>(fall-preview-next)
	Moves the preview cursor to the next line.

<Plug>(fall-preview-prev:scroll)
	Moves the preview cursor up by the value of &scroll.

<Plug>(fall-preview-next:scroll)
	Moves the preview cursor down by the value of &scroll.

<Plug>(fall-preview-left)
	Scrolls the preview content to the left.

<Plug>(fall-preview-right)
	Scrolls the preview content to the right.

<Plug>(fall-preview-left:scroll)
	Scrolls the preview content to the left by the value of &scroll.

<Plug>(fall-preview-right:scroll)
	Scrolls the preview content to the right by the value of &scroll.

<Plug>(fall-help)
	Toggles the help component visibility.

<Plug>(fall-help-prev)
	Moves to the previous page in the help component.

<Plug>(fall-help-next)
	Moves to the next page in the help component.

<Plug>(fall-action-select)
	Opens the action selector for the current item.

-----------------------------------------------------------------------------
HIGHLIGHT					*fall-highlight*

*FallNormal*
	Default text highlight in the picker window.

*FallBorder*
	Border text highlight in the picker window.

*FallInputHeader*
	Input header highlight (default: |FallBorder|).

*FallInputCounter*
	Input counter highlight (default: |FallBorder|).

*FallInputCursor*
	Input cursor highlight (default: |Cursor|).

*FallListMatch*
	Matched text highlight (default: |Match|).

*FallListSelected*
	Selected items highlight (default: |CurSearch|).

*FallHelpHeader*
	Help header highlight (default: |Conceal|).

*FallHelpMappingLhs*
	Mapping LHS highlight (default: |Special|).

*FallHelpMappingRhs*
	Mapping RHS highlight (default: |Title|).

*FallHelpMappingOperator*
	Operator highlight (default: |Operator|).

-----------------------------------------------------------------------------
SIGN						*fall-sign*

*FallListSelected*
	Indicator sign for the selected item in the list component.
	Default to "»".


-----------------------------------------------------------------------------
AUTOCMD						*fall-autocmd*

						*FallPickerEnter*
FallPickerEnter:{name}
	|User| |autocmd| triggered on entering the {name} picker window.

	Use to define custom key mappings:
>vim
	function! s:my_fall() abort
	  " Use <Up> and <Down> to navigate instead of <C-n> and <C-p>
	  cnoremap <nowait> <Up> <Plug>(fall-list-prev)
	  cnoremap <nowait> <Down> <Plug>(fall-list-next)
	  " Disable horizontal scroll
	  cnoremap <nowait> <Nop> <Plug>(fall-list-left)
	  cnoremap <nowait> <Nop> <Plug>(fall-list-right)
	  " Open in split window
	  cnoremap <nowait> <C-x> <Cmd>call fall#action('open:split') <CR>
	  cnoremap <nowait> <C-v> <Cmd>call fall#action('open:vsplit') <CR>
	endfunction

	augroup my_fall
	  autocmd!
	  autocmd User FallPickerEnter:* call s:my_fall()
	augroup END
<
	Mappings after this autocmd are discarded before |FallPickerLeave|.

	See |FallPickerLeave| for the leave event.

						*FallPickerLeave*
FallPickerLeave:{name}
	|User| |autocmd| triggered on leaving the {name} picker window.

	See |FallPickerEnter| for the entry event.

						*FallCustomLoaded*
FallCustomLoaded
	|User| |autocmd| triggered when "custom.ts" is loaded.
	See |:FallCustomReload| for reloading.

						*FallCustomRecached*
FallCustomRecached
	|User| |autocmd| triggered when Deno's cache is cleared.
	See |:FallCustomRecache| for cache clearing.

						*FallPreviewRendered*
FallPreviewRendered:{filename}
	|User| |autocmd| triggered when the preview is rendered.
	{filename} is the rendered file name.

	Use to configure the preview:
>vim
	function! s:my_fall_preview() abort
	  " Enable line number (not available on Vim)
	  setlocal number
	endfunction

	augroup my_fall_preview
	  autocmd!
	  autocmd User FallPreviewRendered:* call s:my_fall_preview()
	augroup END
<
-----------------------------------------------------------------------------
FILETYPE					*fall-filetype*

Fall provides the following filetypes:

	fall-input	Input component filetype.
	fall-list	List component filetype.
	fall-help	Help component filetype.

Example usage:
>vim
	augroup my_fall_list
	  autocmd!
	  autocmd FileType fall-list setlocal list
	augroup END
<
Preview filetype is determined by the previewer; use |FallPreviewRendered|.

=============================================================================
ARCHITECTURE					*fall-architecture*

Fall employs a modular pipeline architecture where data flows through distinct
processing stages. Each stage is handled by specialized components that can be
independently customized or replaced.

Processing Pipeline~
>
	Source -> Collector -> Matcher -> Sorter -> Renderer -> Display
	                                              |
	                                              v
	                                          Previewer
<
The pipeline operates asynchronously with intelligent scheduling to maintain
responsive user interaction while processing large datasets.

Component Communication~

Components communicate through well-defined interfaces using TypeScript types
from the @vim-fall/core package. This ensures type safety and enables
third-party extensions.

Performance Optimizations~

- Incremental processing: Only changed data is reprocessed
- Chunked operations: Large datasets are processed in chunks
- Debounced input: User input is debounced to reduce processing
- Lazy evaluation: Preview generation only occurs for visible items

=============================================================================
MODULE						*fall-module*

Fall decomposes fuzzy finder functionality into the following modular
components. Each module type can have multiple implementations that users
can switch between or customize.

						*fall-module-coordinator*
Coordinator~
	Manages the overall layout and window positioning of the picker
	interface. Coordinators determine how the input, list, and preview
	components are arranged on screen.
	
	Built-in coordinators:
	- modern: Floating windows with customizable dimensions
	- compact: Compact layout with minimal spacing
	- separate: Separate windows for each component

						*fall-module-theme*
Theme~
	Defines visual styling including borders, colors, and icons. Themes
	work with coordinators to create cohesive visual experiences.
	
	Built-in themes:
	- MODERN_THEME: Clean, modern appearance with rounded borders
	- ASCII_THEME: ASCII art style borders
	- DOUBLE_THEME: Double-line borders
	- SINGLE_THEME: Single-line borders

						*fall-module-source*
Source~
	Provides data from various sources like files, buffers, or external
	commands. Sources generate items asynchronously, allowing Fall to
	handle large datasets efficiently.
	
	Interface: Returns AsyncIterableIterator<Item>
	Examples: file, buffer, line, grep, git-grep, rg

						*fall-module-matcher*
Matcher~
	Filters items based on user input using various algorithms. Matchers
	can be incremental (reusing previous results) or non-incremental.
	
	Interface: (items, query) -> AsyncIterableIterator<MatchedItem>
	Examples: fzf (fuzzy matching)

						*fall-module-curator*
Curator~
	A specialized component that combines source and matcher functionality
	for scenarios where filtering happens at the source level (e.g.,
	live-grep). This enables more efficient processing by filtering
	data before it enters the pipeline.
	
	Use cases: Live grep, database queries, API searches

						*fall-module-sorter*
Sorter~
	Orders filtered items using various strategies. Multiple sorters
	can be chained to create complex sorting behaviors.
	
	Interface: (items) -> void (sorts in-place)
	Examples: noop (no sorting), lexical (alphabetical)

						*fall-module-renderer*
Renderer~
	Transforms items into displayable format with syntax highlighting,
	icons, and formatting. Renderers can add visual enhancements without
	modifying the underlying data.
	
	Interface: (items) -> void (modifies display properties)
	Examples: nerdfont (adds icons), smartPath (intelligent path display)

						*fall-module-previewer*
Previewer~
	Generates preview content for the currently selected item. Previewers
	can display file contents, documentation, or any relevant information.
	
	Interface: (item) -> PreviewContent
	Examples: file (with syntax highlighting), buffer, helptag

						*fall-module-action*
Action~
	Defines operations that can be performed on selected items. Actions
	are invoked through the action selector or default key bindings.
	
	Interface: (denops, { selectedItems, item }) -> Promise<void>
	Examples: open, edit, split, vsplit, tabedit, cd, yank

						*fall-module-refiner*
Refiner~
	Post-processes items from sources or curators to add metadata,
	transform data, or filter results. Refiners enable source composition
	and data enrichment.
	
	Use cases: Adding file stats, filtering by type, data transformation

=============================================================================
TROUBLESHOOTING					*fall-troubleshooting*

Common Issues~

1. Icons not displaying correctly
   - Ensure your terminal uses a Nerd Font
   - Disable nerdfont renderer in custom.ts if Nerd Fonts unavailable
   - Check terminal encoding (should be UTF-8)

2. Picker not opening or crashing
   - Verify Deno 2.x is installed: `:echo denops#server#status()`
   - Check Denops server: `:DenopsHealth`
   - Review error messages: `:messages`

3. Slow performance
   - Use ripgrep (rg) instead of grep for file content search
   - Limit search scope with more specific paths
   - Adjust chunk size in custom configuration
   - Disable preview for large files

4. Custom source not working
   - Ensure source returns proper item structure
   - Check Deno console for runtime errors
   - Review TypeScript syntax errors in the editor

5. Key mappings not working
   - Confirm no conflicts: `:verbose cmap <key>`
   - Check if inside picker window during mapping
   - Verify autocmd is triggered: `:autocmd User FallPickerEnter`

Debugging~

Enable verbose logging:
>vim
	let g:denops#debug = 1
<
View Denops server output:
>vim
	:DenopsServer
<
=============================================================================
EXAMPLES					*fall-examples*

Quick Start Configuration~
>vim
	" Basic key mappings
	nnoremap <leader>ff :Fall file<CR>
	nnoremap <leader>fg :Fall grep<CR>
	nnoremap <leader>fb :Fall buffer<CR>
	nnoremap <leader>fh :Fall help<CR>
	nnoremap <leader>fr :FallResume<CR>
<
Custom Source Example~
>typescript
	// In custom.ts
	import { defineSource } from "jsr:@vim-fall/std/source";
	
	const mySource = defineSource(async function* () {
	  yield { id: 1, value: "Item 1", detail: {} };
	  yield { id: 2, value: "Item 2", detail: {} };
	});
	
	definePickerFromSource("mysource", mySource, {
	  matchers: [fzf()],
	  actions: { open: builtin.action.echo },
	  defaultAction: "open",
	});
<
Integration with vim-qfreplace~
>vim
	function! s:fall_qfreplace() abort
	  " Send grep results to quickfix
	  cnoremap <nowait> <C-q> <Cmd>call fall#action('quickfix')<CR>
	endfunction
	
	augroup fall_qfreplace
	  autocmd!
	  autocmd User FallPickerEnter:grep,git-grep,rg call s:fall_qfreplace()
	augroup END
<
=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
